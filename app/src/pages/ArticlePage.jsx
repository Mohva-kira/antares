import React, { useEffect, useState } from "react";
import "tailwindcss/tailwind.css";
import Layout from "../components/Layout";

const ArticleSection = ({ id, title, text, sousSections }) => (
  <div className="mb-8">
    <h2 id={id} className="text-2xl font-bold text-gray-800 mb-4">
      {title}
    </h2>
    <p className="text-gray-700 mb-4">{text}</p>
    {sousSections &&
      sousSections.map((sousSection) => (
        <div key={sousSection.id} className="ml-4">
          <h3
            id={sousSection.id}
            className="text-xl font-semibold text-gray-700 mb-2">
            {sousSection.title}
          </h3>
          <p className="text-gray-600">{sousSection.text}</p>
        </div>
      ))}
  </div>
);

const ReadingProgress = () => {
  const [scrollProgress, setScrollProgress] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      const totalHeight =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const progress = (window.scrollY / totalHeight) * 100;
      setScrollProgress(progress);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-2 bg-gray-200">
      <div
        className="h-2 bg-blue-500"
        style={{ width: `${scrollProgress}%` }}></div>
    </div>
  );
};

const ArticleContent = ({ titre, auteur, date, contenu }) => {
  return (
    <div className="bg-white w-full shadow-lg rounded-2xl p-8 m-4 max-w-4xl mx-auto">
      <h1 className="text-4xl font-bold text-gray-800 mb-4">{titre}</h1>
      <div className="text-gray-600 text-sm mb-8">
        <p>
          Par <span className="font-semibold">{auteur}</span>
        </p>
        <p>{date}</p>

        <Feedback />
      </div>
      <div className="text-gray-700 leading-relaxed space-y-6">
        {contenu.map((section) => (
          <ArticleSection
            key={section.id}
            id={section.id}
            title={section.title}
            text={section.text}
            sousSections={section.sousSections}
          />
        ))}
      </div>
    </div>
  );
};

const TableOfContents = ({ headings }) => (
  <div className="lg:fixed w-full left-5 top-30 bg-white shadow-lg p-4 rounded-2xl">
    <h3 className="text-lg font-bold mb-2">Sommaire</h3>
    <ul className="space-y-2">
      {headings.map((heading) => (
        <li key={heading.id}>
          <a href={`#${heading.id}`} className="text-blue-500 hover:underline">
            {heading.title}
          </a>
        </li>
      ))}
    </ul>
  </div>
);

const SocialShare = () => (
  <div className="fixed bottom-10 left-5 flex  space-x-2">
    <a href="#" className="p-2 bg-blue-500 rounded-full text-white">
      Twitter
    </a>
    <a href="#" className="p-2 bg-blue-600 rounded-full text-white">
      LinkedIn
    </a>
    <a href="#" className="p-2 bg-green-500 rounded-full text-white">
      WhatsApp
    </a>
  </div>
);

const Feedback = () => (
  <div className="flex justify-center items-center space-x-4 mt-6">
    <button className="bg-green-500 text-white p-2 rounded-full">üëç</button>
    <button className="bg-red-500 text-white p-2 rounded-full">üëé</button>
  </div>
);

const article = {
  titre: "Les Fondamentaux de JavaScript",
  auteur: "Alice Martin",
  date: "25 Septembre 2024",
  contenu: [
    {
      id: "introduction",
      title: "Introduction √† JavaScript",
      text: `JavaScript est l'un des langages de programmation les plus populaires et essentiels pour le d√©veloppement web. Il permet de cr√©er des pages web interactives et dynamiques. Dans cet article, nous explorerons les concepts de base de JavaScript.`,
    },
    {
      id: "variables",
      title: "Variables et Types de Donn√©es",
      text: `Les variables sont utilis√©es pour stocker des donn√©es qui peuvent √™tre modifi√©es ou r√©utilis√©es plus tard dans un programme. JavaScript prend en charge plusieurs types de donn√©es, y compris les cha√Ænes, les nombres, les bool√©ens, et plus encore.`,
      sousSections: [
        {
          id: "declaration-variables",
          title: "D√©claration des Variables",
          text: `Il existe trois mani√®res de d√©clarer une variable en JavaScript : avec var, let, et const.
          \n- \`var\` : Utilis√© historiquement mais a des probl√®mes de port√©e.
          \n- \`let\` : Utilis√© pour des variables dont la valeur peut changer.
          \n- \`const\` : Utilis√© pour des variables dont la valeur ne doit pas changer.`,
        },
        {
          id: "types-donnees",
          title: "Types de Donn√©es",
          text: `JavaScript g√®re plusieurs types de donn√©es : 
          \n- **Nombres** : Repr√©sentent des valeurs num√©riques, qu'elles soient enti√®res ou √† virgule flottante.
          \n- **Cha√Ænes de caract√®res (Strings)** : Utilis√©es pour repr√©senter du texte. Les cha√Ænes sont entour√©es de guillemets simples ou doubles.
          \n- **Bool√©ens** : Repr√©sentent des valeurs logiques, soit \`true\`, soit \`false\`.`,
        },
      ],
    },
    {
      id: "fonctions",
      title: "Les Fonctions",
      text: `Les fonctions sont des blocs de code qui peuvent √™tre r√©utilis√©s √† travers votre programme. Elles permettent de structurer le code, d'√©viter la r√©p√©tition, et d'am√©liorer la lisibilit√©.`,
      sousSections: [
        {
          id: "declaration-fonction",
          title: "D√©claration d'une Fonction",
          text: `Il existe deux fa√ßons principales de d√©clarer une fonction en JavaScript : 
          \n1. **D√©claration de fonction** : 
          \n\`\`\`
          function maFonction() {
            console.log("Hello, world!");
          }
          \`\`\`
          \n2. **Expression de fonction** :
          \n\`\`\`
          const maFonction = function() {
            console.log("Hello, world!");
          };
          \`\`\``,
        },
        {
          id: "fonctions-fl√©ch√©es",
          title: "Les Fonctions Fl√©ch√©es",
          text: `Les fonctions fl√©ch√©es sont une syntaxe plus concise pour d√©clarer des fonctions en JavaScript. Elles utilisent la fl√®che \`=>\` au lieu du mot-cl√© \`function\`.
          \n\`\`\`
          const maFonction = () => {
            console.log("Hello, world!");
          };
          \`\`\`
          Elles ont aussi un comportement diff√©rent concernant \`this\`, ce qui les rend utiles dans certaines situations.`,
        },
      ],
    },
    {
      id: "boucles",
      title: "Les Boucles",
      text: `Les boucles permettent d'ex√©cuter un bloc de code plusieurs fois de mani√®re r√©p√©t√©e. JavaScript supporte plusieurs types de boucles.`,
      sousSections: [
        {
          id: "boucle-for",
          title: "La Boucle for",
          text: `La boucle \`for\` est l'une des boucles les plus courantes en JavaScript. Elle permet d'it√©rer un nombre fixe de fois.
          \n\`\`\`
          for (let i = 0; i < 5; i++) {
            console.log(i);
          }
          \`\`\`
          Cela affichera les nombres de 0 √† 4.`,
        },
        {
          id: "boucle-while",
          title: "La Boucle while",
          text: `La boucle \`while\` continue √† s'ex√©cuter tant qu'une condition donn√©e est vraie.
          \n\`\`\`
          let i = 0;
          while (i < 5) {
            console.log(i);
            i++;
          }
          \`\`\`
          Comme avec la boucle \`for\`, cela affichera les nombres de 0 √† 4.`,
        },
      ],
    },
    {
      id: "conclusion",
      title: "Conclusion",
      text: `JavaScript est un langage puissant avec des fonctionnalit√©s riches qui permettent de cr√©er des applications interactives. En ma√Ætrisant les concepts de base comme les variables, les fonctions et les boucles, vous serez bien √©quip√© pour continuer √† explorer JavaScript plus en profondeur.`,
    },
  ],
};

const ArticlePage = () => {
  const headings = article.contenu.map((section) => ({
    id: section.id,
    title: section.title,
  }));

  return (
    <Layout>
      <div className="flex flex-col lg:flex-row  w-full">
        <ReadingProgress />

        <div className="lg:w-1/4 w-full p-2  justify-around lg:h-full ">
          <TableOfContents headings={headings} />
          <SocialShare />
        </div>

        <div className="min-h-screen bg-gray-100 py-10 p-2">
          <div className="text-center mb-10">
            <h1 className="text-4xl font-bold text-gray-800">
              Lecture de l'article
            </h1>
            <p className="text-gray-600 mt-4">
              Explorez les bases de JavaScript √† travers cet article.
            </p>
          </div>

          {/* Table of Contents */}

          {/* Article Content */}
          <ArticleContent
            titre={article.titre}
            auteur={article.auteur}
            date={article.date}
            contenu={article.contenu}
          />
        </div>
      </div>
    </Layout>
  );
};

export default ArticlePage;
